Here's a guide to control an LED on a Raspberry Pi using a Telegram bot:
 * Create a Telegram Bot: Use BotFather in Telegram to create a new bot and obtain the API token.
 * Install Libraries: On your Raspberry Pi, install the necessary Python libraries: sudo apt-get install python3-pip and sudo pip3 install python-telegram-bot RPi.GPIO.
 * Connect the LED: Connect the LED to a GPIO pin on your Raspberry Pi (e.g., GPIO 26).
 * Write Python Code: Create a Python script (e.g., telegram_led.py) with the following structure:
   import RPi.GPIO as GPIO
import telegram
from telegram.ext import Updater, CommandHandler

# Raspberry Pi GPIO setup
led_pin = 26  # Replace with the actual GPIO pin you are using
GPIO.setmode(GPIO.BCM)
GPIO.setup(led_pin, GPIO.OUT)

# Telegram Bot token
bot_token = "YOUR_BOT_TOKEN"  # Replace with your actual bot token

# Function to turn the LED on
def led_on(update, context):
    GPIO.output(led_pin, GPIO.HIGH)
    update.message.reply_text('LED is ON')

# Function to turn the LED off
def led_off(update, context):
    GPIO.output(led_pin, GPIO.LOW)
    update.message.reply_text('LED is OFF')

def main():
    # Create the Updater and pass it your bot's token.
    updater = Updater(token=bot_token, use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # Add command handlers
    dp.add_handler(CommandHandler("on", led_on))
    dp.add_handler(CommandHandler("off", led_off))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT.  This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if __name__ == '__main__':
    main()

 * Run the Script: Execute the Python script on your Raspberry Pi: python3 telegram_led.py.
 * Control via Telegram: Send /on to your Telegram bot to turn the LED on, and /off to turn it off.